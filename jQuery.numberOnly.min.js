/* https://github.com/awj100/jQuery.numberOnly.js */

(function ($) { $.fn.numberOnly = function (o) { o = $.extend({ permitted: [], canCopy: true, canCut: true, canEnter: true, canPaste: true, keyCodeMode: false, max: undefined, maxExceededClass: undefined }, o); this.filter("input, textarea").each(function () { var keyCodeValues = { "48": "0", "49": "1", "50": "2", "51": "3", "52": "4", "53": "5", "54": "6", "55": "7", "56": "8", "57": "9", }, permittedKeyCodes = [0, 8, 9, 37, 39, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57].concat(o.permitted), $this = $(this), checkMax = function (eventObj, potentialValue) { if (typeof (o.max) === "number") { if (potentialValue > o.max) { if (typeof (o.maxExceededClass) === "string") { $this.addClass(o.maxExceededClass); $this.on("keyup.numberOnlyMaxClass", function (e) { if (parseInt($this.val()) <= o.max) { $this.removeClass(o.maxExceededClass); $this.off("keyup.numberOnlyMaxClass") } }) } else { eventObj.preventDefault(); return false } } } }, getKeyCodeSafe = function (e) { if (typeof (e.key) !== "undefined") { return e.key + "" } var keyCode = e.keyCode || e.which; if (keyCodeValues.hasOwnProperty(keyCode)) { return keyCodeValues[keyCode] } return "" }, getPotentialValue = function (e) { return parseInt($this.val() + getKeyCodeSafe(e)) }; if (o.permitted.length) { o.max = undefined } $this.on("keypress.numberOnly", function (e) { var keyCode = e.keyCode || e.which, ctrlCmd = e.ctrlKey || (e.metaKey && !e.ctrlKey); checkMax(e, getPotentialValue(e)); if (permittedKeyCodes.indexOf(keyCode) > -1 || (ctrlCmd && (keyCode === 97 || keyCode === 65)) || (ctrlCmd && (keyCode === 118 || keyCode === 86)) || (ctrlCmd && (keyCode === 99 || keyCode === 67)) || (ctrlCmd && (keyCode === 120 || keyCode === 88)) || (o.canEnter && (keyCode === 13 || keyCode === 86))) { return true } e.preventDefault(); return false }); if (!o.canCopy) { this.oncopy = function (e) { e.preventDefault() } } if (!o.canCut) { this.oncut = function (e) { e.preventDefault() } } if (o.canPaste) { this.onpaste = function (e) { if (e && e.clipboardData && e.clipboardData.getData) { var pastedData = e.clipboardData.getData("text/plain"), keyCodes = permittedKeyCodes.concat(o.permitted).join(), i = pastedData.length; while (i--) { if (keyCodes.indexOf(pastedData.charCodeAt(i)) === -1) { e.preventDefault() } } if (typeof (o.max) === "number") { var potentialValue = $this.val() + pastedData; checkMax(e, potentialValue) } } } } else { this.onpaste = function (e) { e.preventDefault() } } }); return this } })(jQuery);
